#include "graphics.h"
#include <SDL.h>
#include <iostream>
#include <cstdint>
#include <string>
#include <vector>
#include <cmath>

using namespace std;


static void make_font();
static uint32_t col = 0;
SDL_Surface* gfx::font = NULL;


int gfx::init(int w, int h, std::string winname) {
	if (sizeof(int) != sizeof(int32_t)) {
		fprintf(stderr, "error: expected 32 bit standard int\n");
		if (gfx::ERROR_EXIT)  exit(1);
		return 1;
	}
	int err = SDL_Init(SDL_INIT_VIDEO);
	if (err!=0) {
		fprintf(stderr, "error loading SDL: %d\n", err);
		if (gfx::ERROR_EXIT)  exit(1);
		return err;
	}
	SDL_Surface* screen = SDL_SetVideoMode(w, h, 32, SDL_HWSURFACE);
	if (screen==NULL) {
		fprintf(stderr, "error: could not load video\n");
		if (gfx::ERROR_EXIT)  exit(1);
		return 1;
	}
	SDL_WM_SetCaption(winname.c_str(), winname.c_str());
	printf("gfx::init: init OK: w:%d h:%d  %s\n", w, h, winname.c_str());
	make_font();
	gfx::drawc(255,255,255);
	srand( time(NULL) );
	return 0;
}


SDL_Surface* gfx::mksprite(int w, int h) {
	// SDL_Surface* s = SDL_CreateRGBSurface(SDL_SWSURFACE, w, h,
	// 	32, 0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff);
	SDL_PixelFormat* fmt = SDL_GetVideoSurface()->format;
	SDL_Surface* s = SDL_CreateRGBSurface(SDL_SWSURFACE, w, h,
		fmt->BitsPerPixel, fmt->Rmask, fmt->Gmask, fmt->Bmask, fmt->Amask);
	SDL_FillRect(s, NULL, 0x00000000);
	return s;
}
int gfx::rmsprite(SDL_Surface* s) {
	SDL_FreeSurface(s);
	return 0;
}
int gfx::rmall() {
	return 0;
}


int gfx::scale2x(SDL_Surface* src, SDL_Surface* dst) {
	// lock
	SDL_LockSurface(src);
	// SDL_LockSurface(dst);
	// get some data
	uint32_t* sp = (uint32_t*)src->pixels;
	// uint32_t* dp = (uint32_t*)dst->pixels;
	int ww = min(src->w, dst->w/2);
	int hh = min(src->h, dst->h/2);
	// loop
	uint32_t c;
	SDL_Rect r={ 0, 0, 2, 2 };
	for (int y=hh-1; y>=0; y--)
	for (int x=ww-1; x>=0; x--) {
		c = sp[src->w * y + x];
		r.x = x*2,  r.y = y*2;
		SDL_FillRect(dst, &r, c);
	}
	// unlock
	// SDL_UnlockSurface(dst);
	SDL_UnlockSurface(src);
	return 0;
}


int gfx::flip() {
	// clear events before flip
	SDL_Event e;
	while (SDL_PollEvent(&e))
		if (e.type == SDL_QUIT) {
			fprintf(stderr, "error: gfx::flip: untrapped window quit event\n");
			exit(1);
		}
	// flip
	SDL_Flip(SDL_GetVideoSurface());
	SDL_Delay(16);
	return 0;  // flip OK
}


uint32_t gfx::drawc(uint32_t color) {
	col = color;  // set global draw color
	return col;
}
uint32_t gfx::drawc(uint8_t r, uint8_t g, uint8_t b) {
	col = SDL_MapRGB(SDL_GetVideoSurface()->format, r, g, b);
	return col;
}
int gfx::drawpx(SDL_Surface* dst, int x, int y) {
	uint32_t* px = (uint32_t*)dst->pixels;  // get pixels
	if (y >= 0 && y < dst->h && x >= 0 && x < dst->w)  // bounds check
		px[dst->w * y + x] = col;  // set
	return 0;  // OK
}
int gfx::drawline(SDL_Surface* dst, int x1, int y1, int x2, int y2) {
	// Bresenham's line algorithm
	// init values
	const int steep = (abs(y2 - y1) > abs(x2 - x1));
	if (steep)    swap(x1, y1),  swap(x2, y2);
	if (x1 > x2)  swap(x1, x2),  swap(y1, y2);
	const double dx = x2 - x1;
	const double dy = abs(y2 - y1);
	const int ystep = ( y1 < y2 ? 1 : -1 );
	double error = dx / 2.0f;
	// do loop
	int y = y1;
	for (int x=x1; x<x2; x++) {
		if (steep)  gfx::drawpx(dst, y, x);
		else        gfx::drawpx(dst, x, y);
		error -= dy;
		if (error < 0)  y += ystep,  error += dx;
	}
	if (steep)  gfx::drawpx(dst, y2, x2);  // do final pixel
	else        gfx::drawpx(dst, x2, y2);
	return 0;  // OK
}



static const vector<uint16_t> qbfont = {
0x0000,0x0000,0x0000,0x0000,
0x7e81,0xa581,0xbd99,0x817e,
0x7eff,0xdbff,0xc3e7,0xff7e,
0x6cfe,0xfefe,0x7c38,0x1000,
0x1038,0x7cfe,0x7c38,0x1000,
0x387c,0x38fe,0xfed6,0x1038,
0x1010,0x387c,0xfe7c,0x1038,
0x0000,0x183c,0x3c18,0x0000,
0xffff,0xe7c3,0xc3e7,0xffff,
0x003c,0x6642,0x4266,0x3c00,
0xffc3,0x99bd,0xbd99,0xc3ff,
0x0f07,0x0f7d,0xcccc,0xcc78,
0x3c66,0x6666,0x3c18,0x7e18,
0x3f33,0x3f30,0x3070,0xf0e0,
0x7f63,0x7f63,0x6367,0xe6c0,
0x995a,0x3ce7,0xe73c,0x5a99,
0x80e0,0xf8fe,0xf8e0,0x8000,
0x020e,0x3efe,0x3e0e,0x0200,
0x183c,0x7e18,0x187e,0x3c18,
0x6666,0x6666,0x6600,0x6600,
0x7fdb,0xdb7b,0x1b1b,0x1b00,
0x7ec3,0x78cc,0xcc78,0x8cf8,
0x0000,0x0000,0x7e7e,0x7e00,
0x183c,0x7e18,0x7e3c,0x18ff,
0x183c,0x7e18,0x1818,0x1800,
0x1818,0x1818,0x7e3c,0x1800,
0x0018,0x0cfe,0x0c18,0x0000,
0x0030,0x60fe,0x6030,0x0000,
0x0000,0xc0c0,0xc0fe,0x0000,
0x0024,0x66ff,0x6624,0x0000,
0x0018,0x3c7e,0xffff,0x0000,
0x00ff,0xff7e,0x3c18,0x0000,
0x0000,0x0000,0x0000,0x0000,
0x3078,0x7830,0x3000,0x3000,
0x6c6c,0x6c00,0x0000,0x0000,
0x6c6c,0xfe6c,0xfe6c,0x6c00,
0x307c,0xc078,0x0cf8,0x3000,
0x00c6,0xcc18,0x3066,0xc600,
0x386c,0x3876,0xdccc,0x7600,
0x6060,0xc000,0x0000,0x0000,
0x1830,0x6060,0x6030,0x1800,
0x6030,0x1818,0x1830,0x6000,
0x0066,0x3cff,0x3c66,0x0000,
0x0030,0x30fc,0x3030,0x0000,
0x0000,0x0000,0x0070,0x3060,
0x0000,0x00fc,0x0000,0x0000,
0x0000,0x0000,0x0030,0x3000,
0x060c,0x1830,0x60c0,0x8000,
0x78cc,0xdcfc,0xeccc,0x7800,
0x30f0,0x3030,0x3030,0xfc00,
0x78cc,0x0c38,0x60cc,0xfc00,
0x78cc,0x0c38,0x0ccc,0x7800,
0x1c3c,0x6ccc,0xfe0c,0x0c00,
0xfcc0,0xf80c,0x0ccc,0x7800,
0x3860,0xc0f8,0xcccc,0x7800,
0xfccc,0x0c18,0x3060,0x6000,
0x78cc,0xcc78,0xcccc,0x7800,
0x78cc,0xcc7c,0x0c18,0x7000,
0x0000,0x3030,0x0030,0x3000,
0x0000,0x3030,0x0070,0x3060,
0x1830,0x60c0,0x6030,0x1800,
0x0000,0xfc00,0xfc00,0x0000,
0x6030,0x180c,0x1830,0x6000,
0x78cc,0x0c18,0x3000,0x3000,
0x7cc6,0xdede,0xdec0,0x7800,
0x3078,0xcccc,0xfccc,0xcc00,
0xfc66,0x667c,0x6666,0xfc00,
0x3c66,0xc0c0,0xc066,0x3c00,
0xfc6c,0x6666,0x666c,0xfc00,
0xfe62,0x6878,0x6862,0xfe00,
0xfe62,0x6878,0x6860,0xf000,
0x3c66,0xc0c0,0xce66,0x3e00,
0xcccc,0xccfc,0xcccc,0xcc00,
0x7830,0x3030,0x3030,0x7800,
0x1e0c,0x0c0c,0xcccc,0x7800,
0xe666,0x6c78,0x6c66,0xe600,
0xf060,0x6060,0x6266,0xfe00,
0xc6ee,0xfed6,0xc6c6,0xc600,
0xc6e6,0xf6de,0xcec6,0xc600,
0x386c,0xc6c6,0xc66c,0x3800,
0xfc66,0x667c,0x6060,0xf000,
0x78cc,0xcccc,0xdc78,0x1c00,
0xfc66,0x667c,0x786c,0xe600,
0x78cc,0xe038,0x1ccc,0x7800,
0xfcb4,0x3030,0x3030,0x7800,
0xcccc,0xcccc,0xcccc,0xfc00,
0xcccc,0xcccc,0xcc78,0x3000,
0xc6c6,0xc6d6,0xfeee,0xc600,
0xc6c6,0x6c38,0x6cc6,0xc600,
0xcccc,0xcc78,0x3030,0x7800,
0xfecc,0x9830,0x62c6,0xfe00,
0x7860,0x6060,0x6060,0x7800,
0xc060,0x3018,0x0c06,0x0200,
0x7818,0x1818,0x1818,0x7800,
0x1038,0x6cc6,0x0000,0x0000,
0x0000,0x0000,0x0000,0x00ff,
0x3030,0x1800,0x0000,0x0000,
0x0000,0x780c,0x7ccc,0x7600,
0xe060,0x7c66,0x6666,0xbc00,
0x0000,0x78cc,0xc0cc,0x7800,
0x1c0c,0x0c7c,0xcccc,0x7600,
0x0000,0x78cc,0xfcc0,0x7800,
0x386c,0x60f0,0x6060,0xf000,
0x0000,0x76cc,0xcc7c,0x0cf8,
0xe060,0x6c76,0x6666,0xe600,
0x3000,0x7030,0x3030,0x7800,
0x1800,0x7818,0x1818,0xd870,
0xe060,0x666c,0x786c,0xe600,
0x7030,0x3030,0x3030,0x7800,
0x0000,0xecfe,0xd6c6,0xc600,
0x0000,0xf8cc,0xcccc,0xcc00,
0x0000,0x78cc,0xcccc,0x7800,
0x0000,0xdc66,0x667c,0x60f0,
0x0000,0x76cc,0xcc7c,0x0c1e,
0x0000,0xd86c,0x6c60,0xf000,
0x0000,0x7cc0,0x780c,0xf800,
0x1030,0x7c30,0x3034,0x1800,
0x0000,0xcccc,0xcccc,0x7600,
0x0000,0xcccc,0xcc78,0x3000,
0x0000,0xc6c6,0xd6fe,0x6c00,
0x0000,0xc66c,0x386c,0xc600,
0x0000,0xcccc,0xcc7c,0x0cf8,
0x0000,0xfc98,0x3064,0xfc00,
0x1c30,0x30e0,0x3030,0x1c00,
0x1818,0x1800,0x1818,0x1800,
0xe030,0x301c,0x3030,0xe000,
0x76dc,0x0000,0x0000,0x0000,
0x1038,0x6cc6,0xc6c6,0xfe00,
0x78cc,0xc0cc,0x7818,0x0c78,
0x00cc,0x00cc,0xcccc,0x7e00,
0x1c00,0x78cc,0xfcc0,0x7800,
0x7ec3,0x3c06,0x3e66,0x3f00,
0xcc00,0x780c,0x7ccc,0x7e00,
0xe000,0x780c,0x7ccc,0x7e00,
0x3030,0x780c,0x7ccc,0x7e00,
0x0000,0x7cc0,0xc07c,0x063c,
0x7ec3,0x3c66,0x7e60,0x3c00,
0xcc00,0x78cc,0xfcc0,0x7800,
0xe000,0x78cc,0xfcc0,0x7800,
0xcc00,0x7030,0x3030,0x7800,
0x7cc6,0x3818,0x1818,0x3c00,
0xe000,0x7030,0x3030,0x7800,
0xcc30,0x78cc,0xccfc,0xcc00,
0x3030,0x0078,0xccfc,0xcc00,
0x1c00,0xfc60,0x7860,0xfc00,
0x0000,0x7f0c,0x7fcc,0x7f00,
0x3e6c,0xccfe,0xcccc,0xce00,
0x78cc,0x0078,0xcccc,0x7800,
0x00cc,0x0078,0xcccc,0x7800,
0x00e0,0x0078,0xcccc,0x7800,
0x78cc,0x00cc,0xcccc,0x7e00,
0x00e0,0x00cc,0xcccc,0x7e00,
0x00cc,0x00cc,0xccfc,0x0cf8,
0xc638,0x7cc6,0xc67c,0x3800,
0xcc00,0xcccc,0xcccc,0x7800,
0x1818,0x7ec0,0xc07e,0x1818,
0x386c,0x64f0,0x60e6,0xfc00,
0xcccc,0x78fc,0x30fc,0x3000,
0xf0d8,0xd8f4,0xccde,0xcc0e,
0x0e1b,0x187e,0x1818,0xd870,
0x1c00,0x780c,0x7ccc,0x7e00,
0x3800,0x7030,0x3030,0x7800,
0x001c,0x0078,0xcccc,0x7800,
0x001c,0x00cc,0xcccc,0x7e00,
0x00f8,0x00f8,0xcccc,0xcc00,
0xfc00,0xccec,0xfcdc,0xcc00,
0x3c6c,0x6c3e,0x007e,0x0000,
0x3c66,0x663c,0x007e,0x0000,
0x3000,0x3060,0xc0cc,0x7800,
0x0000,0x00fc,0xc0c0,0x0000,
0x0000,0x00fc,0x0c0c,0x0000,
0xc6cc,0xd83e,0x63ce,0x981f,
0xc6cc,0xd8f3,0x67cf,0x9f03,
0x0018,0x0018,0x183c,0x3c18,
0x0033,0x66cc,0x6633,0x0000,
0x00cc,0x6633,0x66cc,0x0000,
0x2288,0x2288,0x2288,0x2288,
0x55aa,0x55aa,0x55aa,0x55aa,
0xdd77,0xdd77,0xdd77,0xdd77,
0x1818,0x1818,0x1818,0x1818,
0x1818,0x1818,0xf818,0x1818,
0x1818,0xf818,0xf818,0x1818,
0x3636,0x3636,0xf636,0x3636,
0x0000,0x0000,0xfe36,0x3636,
0x0000,0xf818,0xf818,0x1818,
0x3636,0xf606,0xf636,0x3636,
0x3636,0x3636,0x3636,0x3636,
0x0000,0xfe06,0xf636,0x3636,
0x3636,0xf606,0xfe00,0x0000,
0x3636,0x3636,0xfe00,0x0000,
0x1818,0xf818,0xf800,0x0000,
0x0000,0x0000,0xf818,0x1818,
0x1818,0x1818,0x1f00,0x0000,
0x1818,0x1818,0xff00,0x0000,
0x0000,0x0000,0xff18,0x1818,
0x1818,0x1818,0x1f18,0x1818,
0x0000,0x0000,0xff00,0x0000,
0x1818,0x1818,0xff18,0x1818,
0x1818,0x1f18,0x1f18,0x1818,
0x3636,0x3636,0x3736,0x3636,
0x3636,0x3730,0x3f00,0x0000,
0x0000,0x3f30,0x3736,0x3636,
0x3636,0xf700,0xff00,0x0000,
0x0000,0xff00,0xf736,0x3636,
0x3636,0x3730,0x3736,0x3636,
0x0000,0xff00,0xff00,0x0000,
0x3636,0xf700,0xf736,0x3636,
0x1818,0xff00,0xff00,0x0000,
0x3636,0x3636,0xff00,0x0000,
0x0000,0xff00,0xff18,0x1818,
0x0000,0x0000,0xff36,0x3636,
0x3636,0x3636,0x3f00,0x0000,
0x1818,0x1f18,0x1f00,0x0000,
0x0000,0x1f18,0x1f18,0x1818,
0x0000,0x0000,0x3f36,0x3636,
0x3636,0x3636,0xf736,0x3636,
0x1818,0xff00,0xff18,0x1818,
0x1818,0x1818,0xf800,0x0000,
0x0000,0x0000,0x1f18,0x1818,
0xffff,0xffff,0xffff,0xffff,
0x0000,0x0000,0xffff,0xffff,
0xf0f0,0xf0f0,0xf0f0,0xf0f0,
0x0f0f,0x0f0f,0x0f0f,0x0f0f,
0xffff,0xffff,0x0000,0x0000,
0x0000,0x76dc,0xc8dc,0x7600,
0x0078,0xccf8,0xccf8,0xc0c0,
0x00fe,0xc6c0,0xc0c0,0xc000,
0x00fe,0x6c6c,0x6c6c,0x6c00,
0xfe66,0x3018,0x3066,0xfe00,
0x0000,0x7ecc,0xcccc,0x7800,
0x0066,0x6666,0x667c,0x60c0,
0x0076,0xdc18,0x1818,0x1800,
0xfc30,0x78cc,0xcc78,0x30fc,
0x386c,0xc6fe,0xc66c,0x3800,
0x386c,0xc6c6,0x6c6c,0xee00,
0x1c30,0x187c,0xcccc,0x7800,
0x0000,0x7edb,0xdb7e,0x0000,
0x060c,0x7edb,0xdb7e,0x60c0,
0x3c60,0xc0fc,0xc060,0x3c00,
0x78cc,0xcccc,0xcccc,0xcc00,
0x00fc,0x00fc,0x00fc,0x0000,
0x3030,0xfc30,0x3000,0xfc00,
0x6030,0x1830,0x6000,0xfc00,
0x1830,0x6030,0x1800,0xfc00,
0x0e1b,0x1b18,0x1818,0x1818,
0x1818,0x1818,0x18d8,0xd870,
0x3030,0x00fc,0x0030,0x3000,
0x0072,0x9c00,0x729c,0x0000,
0x386c,0x6c38,0x0000,0x0000,
0x0000,0x0018,0x1800,0x0000,
0x0000,0x0000,0x1800,0x0000,
0x0f0c,0x0c0c,0xec6c,0x3c1c,
0x786c,0x6c6c,0x6c00,0x0000,
0x780c,0x3860,0x7c00,0x0000,
0x0000,0x3c3c,0x3c3c,0x0000,
0x0000,0x0000,0x0000,0x0000
};


static void make_letter(SDL_Surface* sf, int c) {
	uint32_t fg = gfx::drawc(255,255,255);
	uint32_t bg = gfx::drawc(255,0,0);
	uint32_t* px = (uint32_t*)sf->pixels;
	for (int y=0; y<4; y++) {
		uint8_t a = qbfont[c*4 + y] >> 8;
		uint8_t b = qbfont[c*4 + y] & 0xffff;
		for (int x=0; x<8; x++) {
			px[(y*2  )*8 + x] = ( (a>>(7-x)&1) ? fg : bg );
			px[(y*2+1)*8 + x] = ( (b>>(7-x)&1) ? fg : bg );
		}
	}
}

static void make_font() {
	gfx::font = gfx::mksprite(128, 128);
	SDL_FillRect(gfx::font, NULL, gfx::drawc(0,255,0));
	SDL_Surface* letter = gfx::mksprite(8, 8);
	SDL_Rect r;
	for (int c=0; c<256; c++) {
		make_letter(letter, c);
		r.y = (c/16)*8,  r.x = (c%16)*8;
		SDL_BlitSurface(letter, NULL, gfx::font, &r);
	}
}